#!/bin/bash

# dotbraga
# ==============================================================================
#
# Usage:
#  ./install [--all]   Install everything
#  ./install ohmyzsh   Install only Oh My Zsh. Other values: dualboot, symlinks,
#                      ViM, autosuggestions, syntax-highlighting, spaceship.
#
# After installation, the new `dotbraga` and `dot` aliases are available.
# Also, the variable ${DOTBRAGA} is created to point to the installation folder.

VERSION=$(cat "${DOTBRAGA}/VERSION")
OHMYZSH_FOLDER="$HOME/.oh-my-zsh"
OHMYZSH_URL='https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh'
SPACESHIP_PROMPT_URL='https://github.com/denysdovhan/spaceship-prompt'
ZSH_AUTOSUGGESTIONS_URL='https://github.com/zsh-users/zsh-autosuggestions'
ZSH_SYNTAX_HIGHLIGHTING_URL='https://github.com/zsh-users/zsh-syntax-highlighting'
PROJECT_PATH=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &>/dev/null && pwd)

source "${PROJECT_PATH}"/src/scripts/colors

# Install dotbraga components
# ==============================================================================
install() {


  # PUBLIC METHODS
  # ============================================================================

  # Install Oh My Zsh
  # ----------------------------------------------------------------------------
  ohmyzsh() {
    title 'Install Oh My Zsh'
    install_or_update "${OHMYZSH_FOLDER}" ${OHMYZSH_URL}
    success '‚úÖ Oh My Zsh install finished.'
  }

  # Install Spaceship theme for Oh My Zsh
  # ----------------------------------------------------------------------------
  spaceship() {
    title 'Install Spaceship theme for Oh My Zsh'
    THEME_FOLDER="${OHMYZSH_FOLDER}/custom/themes/spaceship-prompt"
    install_or_update "${THEME_FOLDER}" ${SPACESHIP_PROMPT_URL}
    step 'üîó Creating symlink...'
    ln ${LN_ARGS} "${THEME_FOLDER}/spaceship.zsh-theme" "${OHMYZSH_FOLDER}/themes/spaceship.zsh-theme"
    success '‚úÖ Spaceship install finished.'
  }

  # Install zsh-syntax-highlighting plugin for Oh My Zsh
  # ----------------------------------------------------------------------------
  zsh-syntax-highlighting() {
    title 'Install zsh-syntax-highlighting plugin'
    PLUGIN_PATH="${OHMYZSH_FOLDER}/custom/plugins/zsh-syntax-highlighting"
    install_or_update "${PLUGIN_PATH}" ${ZSH_SYNTAX_HIGHLIGHTING_URL}
    success '‚úÖ zsh-syntax-highlighting install finished.'
  }

  # Install zsh-autosuggestions plugin for Oh My Zsh
  # ----------------------------------------------------------------------------
  zsh-autosuggestions() {
    title 'Install zsh-autosuggestions plugin'
    PLUGIN_PATH="${OHMYZSH_FOLDER}/custom/plugins/zsh-autosuggestions"
    install_or_update "${PLUGIN_PATH}" ${ZSH_AUTOSUGGESTIONS_URL}
    success '‚úÖ zsh-autosuggestions install finished.'
  }

  # Shortcut "Restart to Windows" for Dual Boot systems
  # ----------------------------------------------------------------------------
  dualboot() {
    title "Shortcut 'Restart to Windows' for Dual Boot systems"
    step 'üíª Installing...'
    TARGET='/usr/share/applications'
    EXTENSIONS=(desktop png sh)

    for EXTENSION in "${EXTENSIONS[@]}"; do
      sudo ln ${LN_ARGS} \
        "${PROJECT_PATH}/src/dual-boot/windows.${EXTENSION}" \
        "${TARGET}"
    done

    success "‚úÖ 'Restart to Windows' created successfuly."
  }

  # Delete all symlinks created with symlinks method
  # ----------------------------------------------------------------------------
  # TODO: Create a backup of each file
  clean-symlinks() {
    title 'Clean symbolic links created with dotbraga'
    sudo find "/etc/profile.d" -type l -exec /bin/rm -v {} \;
    /bin/rm -rfv \
      "${HOME}/.zshrc" \
      "${HOME}/.aliases" \
      "${HOME}/.gitconfig" \
      "${HOME}/.config/terminator/config" \
      "${HOME}/.config/fontconfig/conf.d/01-emoji.conf" \
      "${HOME}/.config/qt5ct/qt5ct.conf" \
      "${HOME}/scripts" \
      "${HOME}/.hushlogin" \
      "${HOME}/.sudo_as_admin_successful"
    success '‚úÖ Symlinks removed! üóëÔ∏è'
  }

  # Create symbolic links for settings
  # ----------------------------------------------------------------------------
  symlinks() {
    clean-symlinks
    title 'Create symbolic links for settings'

    step "üîó Touching .hushlogin in \$HOME..." && touch "${HOME}/.hushlogin"
    step "üîó Touching .sudo_as_admin_successful in \$HOME..." && touch "${HOME}/.sudo_as_admin_successful"
    step "üîó Linking .zshrc in \$HOME..." && ln ${LN_ARGS} -t "${HOME}" "${PROJECT_PATH}/src/.zshrc"
    step "üîó Linking .aliases in \$HOME..." && ln ${LN_ARGS} -t "${HOME}" "${PROJECT_PATH}/src/.aliases"
    step "üîó Linking .gitconfig in \$HOME..." && ln ${LN_ARGS} -t "${HOME}" "${PROJECT_PATH}/src/.gitconfig"

    step 'üîó Linking terminator config...'
    TARGET="${HOME}/.config/terminator" && mkdir -p "${TARGET}"
    ln ${LN_ARGS} -t "${TARGET}" "${PROJECT_PATH}/src/terminator/config"

    step 'üîó Linking fontconfig settings...'
    TARGET="${HOME}/.config/fontconfig/conf.d" && mkdir -p "${TARGET}"
    ln ${LN_ARGS} -t "${TARGET}" "${PROJECT_PATH}/src/fontconfig/01-emoji.conf"

    step 'üîó Linking Qt5 settings...'
    TARGET="${HOME}/.config/qt5ct" && mkdir -p "${TARGET}"
    ln ${LN_ARGS} -t "${TARGET}" "${PROJECT_PATH}/src/qt5ct/qt5ct.conf"

    step 'üîó Linking profile scripts...'
    TARGET="/etc/profile.d/" && mkdir -p "${TARGET}"
    sudo find "${PROJECT_PATH}/src/profile" -type f -exec ln ${LN_ARGS} -t "${TARGET}" {} \;

    step 'üîó Linking dotbraga scripts...'
    TARGET="${HOME}/scripts" && mkdir -p "${TARGET}"
    find "${PROJECT_PATH}/src/scripts" -type f,l -exec ln ${LN_ARGS} -t "${TARGET}" {} \;

    step 'üîó Linking some scripts to /usr/bin...'
    find "${PROJECT_PATH}/src/bin" -type f,l -exec sudo ln ${LN_ARGS} -t /usr/bin {} \;
    success '‚úÖ Symlinks created!'
  }

  # Test symlinks created
  # ----------------------------------------------------------------------------
  test-symlinks() {
    title 'Test created symbolic links'
    ls -lah --color=tty \
      "${HOME}/.zshrc" \
      "${HOME}/.aliases" \
      "${HOME}/.profile" \
      "${HOME}/.gitconfig" \
      "${HOME}/.config/terminator/config" \
      "${HOME}/.config/qt5ct/qt5ct.conf" \
      "${HOME}/scripts/colors" \
      "${HOME}/scripts/custom/index" \
      "${HOME}/scripts/custom/path"
    ls -lah --color=tty \
      "${HOME}/.hushlogin" \
      "${HOME}/.sudo_as_admin_successful"
  }

  # Install VIM - Vi IMproved with settings
  # ----------------------------------------------------------------------------
  ViM() {
    title 'Install VIM - Vi IMproved with settings'
    step 'üîç Check if VIM is installed...'
    VIM_FILE="${HOME}/.vimrc"
    VIM_FOLDER="${HOME}/.vim"

    if [[ ! $(command -v vim) ]]; then
      step 'üíª Installing vim...'
    else
      step 'üíæ Updating vim...'
    fi

    {
      # Install dependencies
      sudo apt install -y \
        clang \
        libpython3-dev \
        libtool-bin \
        libxt-dev \
        make

      # Get Vim latest version
      VIM_DIST=${PROJECT_PATH}/dist
      if [[ ! -d ${VIM_DIST} ]]; then
        git clone git@github.com:vim/vim "${VIM_DIST}"
        cd "${VIM_DIST}" || exit
      else
        cd "${VIM_DIST}" || exit
        git pull origin master
      fi

      # Enable Python 3 interpreter
      sed -i '/^#CONF_OPT_PYTHON3 = --enable-python3interp$/s/^#//g' src/Makefile

      # Install Vim
      make
      make test
      sudo make install

      # Undo src/Makefile changes
      git checkout src/Makefile
    }

    step 'üíª Installing vim plugins and settings...'
    ln ${LN_ARGS} "${PROJECT_PATH}"/src/vim/.vimrc "${VIM_FILE}"
    ln ${LN_ARGS} "${PROJECT_PATH}"/src/vim "${VIM_FOLDER}"
    vim -E -s -u "${VIM_FILE}" +PlugInstall +qall >/dev/null
    success '‚úÖ VIM installed and configured'
  }

  # Call the install script without parameters or passing -a / --all parameter
  # ----------------------------------------------------------------------------
  all() {
    ohmyzsh
    spaceship
    zsh-syntax-highlighting
    zsh-autosuggestions
    dualboot
    symlinks
    ViM
    echo
    info 'Finished'
  }


  # PRIVATE METHODS
  # ============================================================================

  # Abstract method to install or update components.
  # ----------------------------------------------------------------------------
  install_or_update() {
    step 'üîç Check if installed...'
    INSTALL_FOLDER=$1
    INSTALL_URL=$2
    CLONE=$3

    if [[ ! -d "${INSTALL_FOLDER}" ]]; then
      step 'üíª Installing...'
      if [[ ${CLONE} == 'true' ]]; then
        git clone "${INSTALL_URL}" "${INSTALL_FOLDER}"
      else
        sh -c "$(curl -fsSL "${INSTALL_URL}")"
      fi
    else
      step 'üíæ Updating...'
      update "${INSTALL_FOLDER}"
    fi
  }

  # Print header.
  # ----------------------------------------------------------------------------
  header() {
    printf "${BWhite}%s${ColorOff} ${Yellow}%s${ColorOff}\n" 'dotbraga' ${VERSION}
  }

  # Define title of each internal function.
  # ----------------------------------------------------------------------------
  title() {
    printf "\n${BPurple}%s${ColorOff}\n" "${1}"
  }

  # Print steps information about installation.
  # ----------------------------------------------------------------------------
  step() {
    printf "${ColorOff}%s${IBlack}\n" "${1}"
  }

  # Asks the user a question and captures the answer.
  # ----------------------------------------------------------------------------
  ask() {
    printf '%s' "${Yellow}" &&
      read -r "ANSWER?${1} ${2} " &&
      printf '%s' "${ColorOff}"

    return "${ANSWER}"
  }

  # Inform user about some action.
  # ----------------------------------------------------------------------------
  info() {
    printf "${Blue}"'info'"${ColorOff} %s\n" "${1}"
  }

  # Debug some information.
  # ----------------------------------------------------------------------------
  debug() {
    printf "${IYellow}"'debug'"${ColorOff} %s\n" "${*}"
  }

  # Print done message
  # ----------------------------------------------------------------------------
  success() {
    printf "${Green}success${ColorOff} %s\n" "${1}"
  }

  # Abort execution with message
  # ----------------------------------------------------------------------------
  abort() {
    printf "${Red}abort${ColorOff} %s\n" "${1}"
  }

  # Update plugin or theme using git pull
  # ----------------------------------------------------------------------------
  update() {
    {
      cd "${1}" && git pull || exit
    }
  }


  # FUNCTION CALL
  # ============================================================================

  header
  args=("$@")

  # If empty ARGS, run everything...
  [[ "${args[*]}" == '' ]] && all

  # ...or detect the function to run.
  for arg in "${args[@]}"; do
    case $arg in
    vim) ViM ;;
    ohmyzsh) ohmyzsh ;;
    spaceship) spaceship ;;
    dualboot) dualboot ;;
    autosuggestions | zsh-autosuggestions) zsh-autosuggestions ;;
    syntax-highlighting | zsh-syntax-highlighting) zsh-syntax-highlighting ;;
    -l | --link | symlinks) symlinks "$@" ;;
    --test-symlinks) test-symlinks "$@" ;;
    "" | -a | --all | all) all ;;
    *) exit ;;
    esac
  done
}

# Call the script
install "$@"