#!/bin/bash

# Dotfiles install
# ------------------------------------------------------------------------------
#
# Usage:
#   ./install           # Install everything
#   ./install --all     # Install everything
#   ./install ohmyzsh   # Install only Oh My ZSH
#   ./install vim       # Install Vim and its settings

source src/scripts/colors

VERSION='1.1.0'
PROJECT_PATH=$(pwd)
APT_ARGS='-yqqq'
LN_ARGS='-sfn'

OHMYZSH_FOLDER="$HOME/.oh-my-zsh"
OHMYZSH_URL='https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh'
SPACESHIP_PROMPT_URL='https://github.com/denysdovhan/spaceship-prompt'
ZSH_SYNTAX_HIGHLIGHTING_URL='https://github.com/zsh-users/zsh-syntax-highlighting'
ZSH_AUTOSUGGESTIONS='https://github.com/zsh-users/zsh-autosuggestions'

# Install the components of dotfiles
# ------------------------------------------------------------------------------
install() {

  # Install Oh My ZSH
  ohmyzsh() {
    title 'Install Oh My ZSH'
    step '🔍 Check if installed...'

    if [[ ! -d "$OHMYZSH_FOLDER" ]]; then
      step '💻 Installing...'
      sh -c "$(curl -fsSL ${OHMYZSH_URL})"
    else
      step '💾 Updating...'
      update "${OHMYZSH_FOLDER}"
    fi

    success 'Oh My ZSH install finished.'
  }

  # Install Spaceship theme for Oh My ZSH
  spaceship() {
    title 'Install Spaceship theme for Oh My ZSH'
    step '🔍 Check if installed...'
    THEME_PATH="${OHMYZSH_FOLDER}/custom/themes/spaceship-prompt"

    if [[ ! -d "${THEME_PATH}" ]]; then
      step '💻 Installing...'
      git clone ${SPACESHIP_PROMPT_URL} "${THEME_PATH}"
    else
      step '💾 Updating...'
      update "${THEME_PATH}"
    fi

    step '🔗 Creating symlink...'
    ln ${LN_ARGS} "${THEME_PATH}/spaceship.zsh-theme" "${OHMYZSH_FOLDER}/themes/spaceship.zsh-theme"

    success 'Spaceship install finished.'
  }

  # Install zsh-syntax-highlighting plugin for Oh My ZSH
  zsh-syntax-highlighting() {
    title 'Install zsh-syntax-highlighting plugin'
    step '🔍 Check if installed...'
    PLUGIN_PATH="${OHMYZSH_FOLDER}/custom/plugins/zsh-syntax-highlighting"

    if [[ ! -d "${PLUGIN_PATH}" ]]; then
      step '💻 Installing...'
      git clone ${ZSH_SYNTAX_HIGHLIGHTING_URL} "${PLUGIN_PATH}"
    else
      step '💾 Updating...'
      update "${PLUGIN_PATH}"
    fi

    success 'zsh-syntax-highlighting install finished.'
  }

  # Install zsh-autosuggestions plugin for Oh My ZSH
  zsh-autosuggestions() {
    title 'Install zsh-autosuggestions plugin'
    step '🔍 Check if installed...'
    PLUGIN_PATH="${OHMYZSH_FOLDER}/custom/plugins/zsh-autosuggestions"

    if [[ ! -d "${PLUGIN_PATH}" ]]; then
      step '💻 Installing...'
      git clone ${ZSH_AUTOSUGGESTIONS} "${PLUGIN_PATH}"
    else
      step '💾 Updating...'
      update "${PLUGIN_PATH}"
    fi

    success 'zsh-autosuggestions install finished.'
  }

  # Shortcut "Restart to Windows" for Dual Boot systems
  shortcuts() {
    title "Shortcut 'Restart to Windows' for Dual Boot systems"
    step '💻 Installing...'
    target='/usr/share/applications'
    extensions=(desktop png sh)

    for extension in "${extensions[@]}"; do
      sudo ln ${LN_ARGS} \
        "${PROJECT_PATH}/src/dual-boot/windows.${extension}" \
        "${target}"
    done

    success "'Restart to Windows' created successfuly."
  }

  # Delete all symlinks created with symlinks method
  clean_symlinks() {
    title 'Clean symbolic links created with dotbraga'

    /bin/rm -rfv \
      "${HOME}/.zshrc" \
      "${HOME}/.aliases" \
      "${HOME}/.gitconfig" \
      "${HOME}/.config/terminator/config" \
      "${HOME}/.config/fontconfig/conf.d/01-emoji.conf" \
      "${HOME}/.config/qt5ct/qt5ct.conf" \
      "${HOME}/scripts" \
      "${HOME}/.hushlogin" \
      "${HOME}/.sudo_as_admin_successful"

    sudo find "/etc/profile.d" -type l -exec /bin/rm -v {} \;

    success 'Symlinks removed! 🗑️'
  }

  # Create symbolic links for settings
  symlinks() {
    clean_symlinks
    title 'Create symbolic links for settings'

    step "🔗 Linking .zshrc in \$HOME..." && ln ${LN_ARGS} -t "${HOME}" "${PROJECT_PATH}/src/.zshrc"
    step "🔗 Linking .aliases in \$HOME..." && ln ${LN_ARGS} -t "${HOME}" "${PROJECT_PATH}/src/.aliases"
    step "🔗 Linking .gitconfig in \$HOME..." && ln ${LN_ARGS} -t "${HOME}" "${PROJECT_PATH}/src/.gitconfig"

    step '🔗 Linking terminator config...'
    TARGET="${HOME}/.config/terminator" && mkdir -p "${TARGET}"
    ln ${LN_ARGS} -t "${TARGET}" "${PROJECT_PATH}/src/terminator/config"

    step '🔗 Linking fontconfig settings...'
    TARGET="${HOME}/.config/fontconfig/conf.d" && mkdir -p "${TARGET}"
    ln ${LN_ARGS} -t "${TARGET}" "${PROJECT_PATH}/src/fontconfig/01-emoji.conf"

    step '🔗 Linking Qt5 settings...'
    TARGET="${HOME}/.config/qt5ct" && mkdir -p "${TARGET}"
    ln ${LN_ARGS} -t "${TARGET}" "${PROJECT_PATH}/src/qt5ct/qt5ct.conf"

    step '🔗 Linking profile scripts...'
    TARGET="/etc/profile.d/" && mkdir -p "${TARGET}"
    sudo find "${PROJECT_PATH}/src/profile" -type f -exec ln ${LN_ARGS} -t "${TARGET}" {} \;

    step '🔗 Linking dotbraga scripts...'
    TARGET="${HOME}/scripts" && mkdir -p "${TARGET}"
    find "${PROJECT_PATH}/src/scripts" -type f,l -exec ln ${LN_ARGS} -t "${TARGET}" {} \;

    step '🔗 Linking some scripts to /usr/bin...'
    find "${PROJECT_PATH}/src/bin" -type f,l -exec sudo ln ${LN_ARGS} -t /usr/bin {} \;

    step "🔗 Touching .hushlogin in \$HOME..." && touch "${HOME}/.hushlogin"
    step "🔗 Touching .sudo_as_admin_successful in \$HOME..." && touch "${HOME}/.sudo_as_admin_successful"

    success 'Symlinks created!'
  }

  # Test symlinks created
  test-symlinks() {
    title 'Test created symbolic links'

    ls -lah --color=tty \
      "${HOME}/.zshrc" \
      "${HOME}/.aliases" \
      "${HOME}/.profile" \
      "${HOME}/.gitconfig" \
      "${HOME}/.config/terminator/config" \
      "${HOME}/.config/qt5ct/qt5ct.conf" \
      "${HOME}/scripts/colors" \
      "${HOME}/scripts/custom/index" \
      "${HOME}/scripts/custom/path"

    ls -lah --color=tty \
      "${HOME}/.hushlogin" \
      "${HOME}/.sudo_as_admin_successful"
  }

  # Install VIM - Vi IMproved with settings
  _vim() {
    title 'Install VIM - Vi IMproved with settings'
    step '🔍 Check if VIM is installed...'
    VIM_FILE="${HOME}/.vimrc"
    VIM_FOLDER="${HOME}/.vim"

    if [[ ! $(command -v vim) ]]; then
      step '💻 Installing vim...'
    else
      step '💾 Updating vim...'
    fi

    sudo apt install $APT_ARGS vim

    step '💻 Installing vim plugins and settings...'
    ln ${LN_ARGS} "${PROJECT_PATH}"/src/vim/.vimrc "${VIM_FILE}"
    ln ${LN_ARGS} "${PROJECT_PATH}"/src/vim "${VIM_FOLDER}"
    vim -E -s -u "${VIM_FILE}" +PlugInstall +qall >/dev/null

    success 'VIM installed and configured'
  }

  # Call the install script without parameters or passing -a / --all parameter
  all() {
    ohmyzsh
    spaceship
    zsh-syntax-highlighting
    zsh-autosuggestions
    shortcuts
    symlinks
    _vim

    echo
    info 'Finished'
  }

  # Private methods
  # ----------------------------------------------------------------------------

  # Print the header
  header() {
    printf "${BWhite}%s${ColorOff} ${Yellow}%s${ColorOff}\n" 'dotfiles' ${VERSION}
  }

  # Define title of each internal function
  title() {
    printf "\n${BPurple}%s${ColorOff}\n" "${1}"
  }

  # Print steps information about installation
  step() {
    printf "${ColorOff}%s${IBlack}\n" "${1}"
  }

  # Asks the user a question and captures the answer
  ask() {
    printf '%s' "${Yellow}" &&
      read -r "ANSWER?${1} ${2} " &&
      printf '%s' "${ColorOff}"

    return "${ANSWER}"
  }

  # Inform user about some action.
  info() {
    printf "${Blue}"'info'"${ColorOff} %s\n" "${1}"
  }

  # Debug some information.
  debug() {
    printf "${IYellow}"'debug'"${ColorOff} %s\n" "${*}"
  }

  # Print done message
  success() {
    printf "${Green}success${ColorOff} %s\n" "${1}"
  }

  # Abort execution with message
  abort() {
    printf "${Red}abort${ColorOff} %s\n" "${1}"
  }

  # Update plugin or theme using git pull
  update() {
    {
      cd "${1}" &&
        git pull origin master &&
        cd "${PROJECT_PATH}" ||
        exit
    }
  }

  # Function call
  # ----------------------------------------------------------------------------

  header
  args=("$@")

  # If empty ARGS, run everything...
  [[ "${args[*]}" == '' ]] && all

  # ...or detect the function to run.
  for arg in "${args[@]}"; do
    case $arg in
    vim) _vim ;;
    ohmyzsh) ohmyzsh ;;
    spaceship) spaceship ;;
    dual-boot | shortcuts) shortcuts ;;
    autosuggestions | zsh-autosuggestions) zsh-autosuggestions ;;
    syntax-highlighting | zsh-syntax-highlighting) zsh-syntax-highlighting ;;
    -l | --link | symlinks) symlinks "$@" ;;
    --test-symlinks) test-symlinks "$@" ;;
    "" | -a | --all | all) all ;;
    *) exit ;;
    esac
  done
}

# Call the script
install "$@"