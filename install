#!/bin/zsh

# dotbraga
#
# Usage:
#  ./install [--all]  Install everything
#  ./install ohmyzsh  Install only Oh My Zsh.
#                     Other values: dualboot, links, ViM, zsh-autosuggestions,
#                     zsh-syntax-highlighting, spaceship, powerlevel10k.

VERSION=$(cat "${DOTBRAGA}/VERSION")

OHMYZSH_URL='https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh'
OHMYZSH_FOLDER="${HOME}/.oh-my-zsh"
POWERLEVEL10K_URL='https://github.com/romkatv/powerlevel10k'
POWERLEVEL10K_FOLDER="${OHMYZSH_FOLDER}/custom/themes/powerlevel10k"
SPACESHIP_PROMPT_URL='https://github.com/denysdovhan/spaceship-prompt'
SPACESHIP_PROMPT_FOLDER="${OHMYZSH_FOLDER}/custom/themes/spaceship-prompt"
ZSH_AUTOSUGGESTIONS_URL='https://github.com/zsh-users/zsh-autosuggestions'
ZSH_AUTOSUGGESTIONS_FOLDER="${OHMYZSH_FOLDER}/custom/plugins/zsh-autosuggestions"
ZSH_SYNTAX_HIGHLIGHTING_URL='https://github.com/zsh-users/zsh-syntax-highlighting'
ZSH_SYNTAX_HIGHLIGHTING_FOLDER="${OHMYZSH_FOLDER}/custom/plugins/zsh-syntax-highlighting"
PROJECT_PATH=$(dirname "$0")

source "${PROJECT_PATH}/src/scripts/colors"

# dotbraga components
# ==============================================================================
install() {

  # PUBLIC METHODS
  # ============================================================================

  # Install Oh My Zsh
  # ----------------------------------------------------------------------------
  ohmyzsh() {
    setup 'Oh My Zsh' "${OHMYZSH_FOLDER}" ${OHMYZSH_URL}
  }

  # Install zsh-syntax-highlighting plugin for Oh My Zsh
  # ----------------------------------------------------------------------------
  zsh-syntax-highlighting() {
    setup 'zsh-syntax-highlighting' "${ZSH_SYNTAX_HIGHLIGHTING_FOLDER}" ${ZSH_SYNTAX_HIGHLIGHTING_URL}
  }

  # Install zsh-autosuggestions plugin for Oh My Zsh
  # ----------------------------------------------------------------------------
  zsh-autosuggestions() {
    setup 'zsh-autosuggestions' "${ZSH_AUTOSUGGESTIONS_FOLDER}" ${ZSH_AUTOSUGGESTIONS_URL}
  }

  # Install Spaceship theme for Oh My Zsh
  # ----------------------------------------------------------------------------
  spaceship() {
    setup 'Spaceship zsh theme' "${SPACESHIP_PROMPT_FOLDER}" ${SPACESHIP_PROMPT_URL}
  }

  # Install Powerlevel10k theme for Oh My Zsh
  # ----------------------------------------------------------------------------
  powerlevel10k() {
    setup 'Powerlevel10k' "${POWERLEVEL10K_FOLDER}" ${POWERLEVEL10K_URL} true
    ln -sfnv "${POWERLEVEL10K_FOLDER}/powerlevel10k.zsh-theme" "${OHMYZSH_FOLDER}/themes/powerlevel10k.zsh-theme"
  }

  # Shortcut "Restart to Windows" for Dual Boot systems
  # ----------------------------------------------------------------------------
  dualboot() {
    title "Shortcut 'Restart to Windows' for Dual Boot systems"
    for EXTENSION in desktop png sh; do
      sudo ln -sfnv "${PROJECT_PATH}/src/dualboot/windows.${EXTENSION}" /usr/share/applications
    done
    success "‚úÖ 'Restart to Windows' created successfuly."
  }

  # Symlink src/bin scripts to /usr/bin
  # ----------------------------------------------------------------------------
  bin() {
    step 'üîó Link some scripts to /usr/bin...'
    find "${PROJECT_PATH}/src/bin" -type f,l -exec sudo ln -sfnv -t /usr/bin {} \;
  }

  # Create symlinks
  # ----------------------------------------------------------------------------
  links() {
    setopt NULL_GLOB
    title 'Create symlinks for dotfiles' && cp -afrsv ${DOTBRAGA}/src/dotfiles/{.,}* ${HOME}
    title 'Create symlinks for /etc'     && sudo cp -afrsv ${DOTBRAGA}/src/etc/{.,}* /etc
    title 'Create symlinks for /usr/bin' && sudo cp -afrsv ${DOTBRAGA}/src/bin/{.,}* /usr/bin
    echo && success '‚úÖ Links created!'
  }

  # Install VIM - Vi IMproved with settings
  # ----------------------------------------------------------------------------
  ViM() {
    VIM_FILE="${HOME}/.vimrc"
    VIM_FOLDER="${HOME}/.vim"
    title 'Install VIM - Vi IMproved with settings'
    step 'üîç Check if VIM is installed...'

    [[ ! $(command -v vim) ]] && step 'üíª Installing vim...' || step 'üíæ Updating vim...'

    {
      # Install dependencies
      sudo apt install -y \
        clang \
        libpython3-dev \
        libtool-bin \
        libxt-dev \
        make

      # Get Vim latest version
      VIM_DIST=${PROJECT_PATH}/dist
      if [[ ! -d ${VIM_DIST} ]]; then
        git clone https://github.com/vim/vim "${VIM_DIST}"
        cd "${VIM_DIST}" || exit
      else
        cd "${VIM_DIST}" || exit
        git pull origin master
      fi

      # Enable Python 3 interpreter
      sed -i '/^#CONF_OPT_PYTHON3 = --enable-python3interp$/s/^#//g' src/Makefile

      # Install Vim
      make
      make test
      sudo make install

      # Undo src/Makefile changes
      git checkout src/Makefile
    }

    step 'üíª Installing vim plugins and settings...'
    ln -sfnv "${PROJECT_PATH}"/src/vim/.vimrc "${VIM_FILE}"
    ln -sfnv "${PROJECT_PATH}"/src/vim "${VIM_FOLDER}"
    vim -E -s -u "${VIM_FILE}" +PlugInstall +qall >/dev/null
    success '‚úÖ VIM installed and configured'
  }

  # Call the install script without parameters or passing -a / --all parameter
  # ----------------------------------------------------------------------------
  all() {
    ohmyzsh
    spaceship
    powerlevel10k
    zsh-syntax-highlighting
    zsh-autosuggestions
    dualboot
    bin
    links
    ViM
    echo
    info 'Finished'
  }

  # PRIVATE METHODS
  # ============================================================================

  # Abstract method to install or update components.
  # ----------------------------------------------------------------------------
  setup() {
    NAME=$1
    INSTALL_FOLDER=$2
    INSTALL_URL=$3
    CLONE=$4

    title "Install ${NAME}"
    step 'üîç Check if installed...'

    step 'üîó Creating symlink...'
    ln -sfnv "${THEME_FOLDER}/spaceship.zsh-theme" "${OHMYZSH_FOLDER}/themes/spaceship.zsh-theme"

    if [[ -d "${INSTALL_FOLDER}" ]]; then
      step 'üíæ Updating...'
      update "${INSTALL_FOLDER}"
    else
      step 'üíª Installing...'
      if [[ ${CLONE} == 'true' ]]; then
        git clone "${INSTALL_URL}" "${INSTALL_FOLDER}"
      else
        sh -c "$(curl -fsSL "${INSTALL_URL}")"
      fi
    fi

    success "‚úÖ ${NAME} install finished."
  }

  # Print header.
  # ----------------------------------------------------------------------------
  header() {
    printf "${BWhite}%s${ColorOff} ${Yellow}%s${ColorOff}\n" 'dotbraga' "${VERSION}"
  }

  # Define title of each internal function.
  # ----------------------------------------------------------------------------
  title() {
    printf "\n${BPurple}%s${ColorOff}\n" "${1}"
  }

  # Print steps information about installation.
  # ----------------------------------------------------------------------------
  step() {
    printf "${ColorOff}%s\n" "${1}"
  }

  # Asks the user a question and captures the answer.
  # ----------------------------------------------------------------------------
  ask() {
    printf '%s' "${Yellow}" &&
      read -r "ANSWER?${1} ${2} " &&
      printf '%s' "${ColorOff}"

    return "${ANSWER}"
  }

  # Inform user about some action.
  # ----------------------------------------------------------------------------
  info() {
    printf "${Blue}"'info'"${ColorOff} %s\n" "${1}"
  }

  # Debug some information.
  # ----------------------------------------------------------------------------
  debug() {
    printf "${IYellow}"'debug'"${ColorOff} %s\n" "${*}"
  }

  # Print done message
  # ----------------------------------------------------------------------------
  success() {
    printf "${Green}success${ColorOff} %s\n" "${1}"
  }

  # Abort execution with message
  # ----------------------------------------------------------------------------
  abort() {
    printf "${Red}abort${ColorOff} %s\n" "${1}"
  }

  # Update plugin or theme using git pull
  # ----------------------------------------------------------------------------
  update() {
    {
      cd "${1}" && git pull || exit
    }
  }

  # FUNCTION CALL
  # ============================================================================

  header
  args=("$@")

  # If empty ARGS, run everything...
  [[ "${args[*]}" == '' ]] && all

  # ...or detect the function to run.
  for arg in "${args[@]}"; do
    case $arg in
    bin) bin ;;
    dualboot) dualboot ;;
    ohmyzsh) ohmyzsh ;;
    powerlevel10k) powerlevel10k ;;
    spaceship) spaceship ;;
    vim) ViM ;;
    zsh-autosuggestions | autosuggestions) zsh-autosuggestions ;;
    zsh-syntax-highlighting | syntax-highlighting) zsh-syntax-highlighting ;;
    -l | --link | links) links "$@" ;;
    "" | -a | --all | all) all ;;
    *) exit ;;
    esac
  done
}

# Call the script
install "$@"
