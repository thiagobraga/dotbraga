#!/bin/zsh

# Dotfiles install
#
# Usage:
#   ./install
#   ./install -f        # Run scripts without confirmation
#   ./install -v        # Verbose mode
#   ./install ohmyzsh   # Install only Oh My ZSH
#   ./install vimrc     # Install Vim and its settings
#   ./install --all     # Install everything

# Define current version
VERSION='0.0.1'

# Define project path
PROJECT_PATH=$(pwd)

# Global constants
APT_PARAMS='-yqqq'
LN_OPTS='-sfn'

# Import color constants
. ./scripts/colors

# Test colors in the script above
# print_colors && exit

# Install the components of dotfiles
# =====================================================
function install() {

  # Print the header
  function header() {
    echo ${BWhite}dotfiles${Color_Off} ${Yellow}${VERSION}${Color_Off}
  }

  # (WIP) Bump version of the project
  # Change README.md
  # Change this script
  # NEW_VERSION='0.1.0' && sed -E 's/version-(.*)-/version--/gmi' README.md | head -n 10
  function bump() {
    $1
    echo $1
    echo $2
    [[ $2 == "" ]] && abort 'Define new version to bump. Exit'
    CURRENT_VERSION=$(grep -o -P '(?<=Version ).*(?=">)' ./README.md)
    title "Bump version${Color_Off} ${CURRENT_VERSION} to ${2}"
    # ask 'Are you sure?' '[y/N]'
  }

  # Define title of each internal function
  function title() {
    benchmark_start
    echo ${BPurple}"\n${1}"${Color_Off}
  }

  # Print steps information about installation
  function step() {
    echo "${IBlack}${1}${Color_Off}" "${2}"
  }

  # Starts the benchmark time to show at the end of each function
  function benchmark_start() {
    START=$(date +%s.%6N)
  }

  # Stops the benchmark and calculate the amount of time the function used
  function benchmark_stop() {
    END=$(date +%s.%6N)
    RUNTIME=$(date -d @"$((${END} - ${START}))" +%s.%2N)
  }

  # Ask question to the user capturing keyboard input.
  function ask() {
    printf ${Yellow} && read "ANSWER?${1} ${2} " && printf ${Color_Off}
    return ${ANSWER}
  }

  # Inform user about some action.
  function info() {
    echo ${Blue}'info'${Color_Off} "${1}"
  }

  # Debug some information.
  function debug() {
    echo ${IYellow}'debug'${Color_Off} $@
  }

  # Print done message with duration
  function success() {
    benchmark_stop
    echo "${Green}success${Color_Off} ${1}"
    echo "✨ Done in ${RUNTIME}s"
  }

  # Abort execution with message
  function abort() {
    echo "${Red}abort${Color_Off} ${1}"
  }

  # Install Oh My ZSH
  function ohmyzsh() {
    title 'Install Oh My ZSH'
    step '[1/2]' '🔍 Check if installed...'

    [[ ! -d "$HOME/.oh-my-zsh" ]] && {
      step '[2/2]' "💻 Installing..."${IBlack}
      URL='https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh'
      sh -c "$(curl -fsSL ${URL})"
    } || {
      step '[2/2]' "💾 Updating...${IBlack}"
      cd ${HOME}/.oh-my-zsh || exit
      git pull origin master && cd ${PROJECT_PATH}
    }

    success 'Oh My ZSH install finished.'
  }

  # Install Spaceship theme for Oh My ZSH
  function spaceship() {
    title "Install Spaceship theme ${Purple}for Oh My ZSH${Color_Off}"
    step '[1/3]' '🔍 Check if installed...'
    OHMYZSH="${HOME}/.oh-my-zsh"
    THEME_PATH="${OHMYZSH}/custom/themes/spaceship-prompt"

    [[ ! -d "${THEME_PATH}" ]] && {
      step '[2/3]' "💻 Installing...${IBlack}"
      GITHUB_URL='https://github.com/denysdovhan/spaceship-prompt'
      git clone ${GITHUB_URL} ${THEME_PATH}
    } || {
      step '[2/3]' "💾 Updating...${IBlack}"
      cd ${THEME_PATH} || exit
      git pull origin master && cd ${PROJECT_PATH}
    }

    step '[3/3]' "🔗 Creating symlink...${IBlack}"
    ln ${LN_OPTS} ${THEME_PATH}/spaceship.zsh-theme ${OHMYZSH}/themes/spaceship.zsh-theme

    success 'Spaceship install finished.'
  }

  # Install zsh-syntax-highlighting plugin for Oh My ZSH
  function zsh-syntax-highlighting() {
    title "Install zsh-syntax-highlighting plugin ${Purple}for Oh My ZSH${Color_Off}"
    step '[1/2]' '🔍 Check if installed...'
    OHMYZSH="${HOME}/.oh-my-zsh"
    PLUGIN_PATH="${OHMYZSH}/custom/plugins/zsh-syntax-highlighting"

    [[ ! -d "${PLUGIN_PATH}" ]] && {
      step '[2/3]' "💻 Installing...${IBlack}"
      GITHUB_URL='https://github.com/zsh-users/zsh-syntax-highlighting'
      git clone ${GITHUB_URL} ${PLUGIN_PATH}
    } || {
      step '[2/2]' "💾 Updating...${IBlack}"
      cd ${PLUGIN_PATH} || exit
      git pull origin master && cd ${PROJECT_PATH}
    }

    success 'zsh-syntax-highlighting install finished.'
  }

  # Install zsh-autosuggestions plugin for Oh My ZSH
  function zsh-autosuggestions() {
    title "Install zsh-autosuggestions plugin ${Purple}for Oh My ZSH${Color_Off}"
    step '[1/2]' '🔍 Check if installed...'
    OHMYZSH="${HOME}/.oh-my-zsh"
    PLUGIN_PATH="${OHMYZSH}/custom/plugins/zsh-autosuggestions"

    [[ ! -d "${PLUGIN_PATH}" ]] && {
      step '[2/3]' "💻 Installing...${IBlack}"
      GITHUB_URL='https://github.com/zsh-users/zsh-autosuggestions'
      git clone ${GITHUB_URL} ${PLUGIN_PATH}
    } || {
      step '[2/2]' "💾 Updating...${IBlack}"
      cd ${PLUGIN_PATH} || exit
      git pull origin master && cd ${PROJECT_PATH}
    }

    success 'zsh-autosuggestions install finished.'
  }

  # Shortcut "Restart to Windows" for Dual Boot systems
  # TODO: Attach to favorites.
  function shortcuts() {
    title "Shortcut 'Restart to Windows' ${Purple}for Dual Boot systems${Color_Off}"
    step '[1/1]' "💻 Installing...${IBlack}"

    sudo ln ${LN_OPTS} \
      ${PROJECT_PATH}/config/shortcuts/windows.{desktop,png,sh} \
      /usr/share/applications

    success "'Restart to Windows' created successfuly."
  }

  # Create symbolic links for settings
  function symlinks() {
    title "Create symbolic links ${Purple}for settings${Color_Off}"

    step '[1/9]' "🔗 Linking .aliases in \$HOME...${IBlack}"
    ln ${LN_OPTS} -t ${HOME} ${PROJECT_PATH}/config/.aliases

    step '[2/9]' "🔗 Linking .zshrc in \$HOME...${IBlack}"
    ln ${LN_OPTS} -t ${HOME} ${PROJECT_PATH}/config/.zshrc

    step '[3/9]' "🔗 Linking .profile in \$HOME...${IBlack}"
    ln ${LN_OPTS} -t ${HOME} ${PROJECT_PATH}/linux/.profile

    step '[4/9]' "🔗 Linking .gitconfig in \$HOME...${IBlack}"
    ln ${LN_OPTS} -t ${HOME} ${PROJECT_PATH}/config/.gitconfig

    step '[5/9]' "🔗 Linking terminator config...${IBlack}"
    TARGET="${HOME}/.config/terminator/" && mkdir -p ${TARGET}
    ln ${LN_OPTS} -t ${TARGET} ${PROJECT_PATH}/config/terminator/config

    step '[6/9]' "🔗 Linking fontconfig settings...${IBlack}"
    TARGET="${HOME}/.config/fontconfig/conf.d/" && mkdir -p ${TARGET}
    ln ${LN_OPTS} -t ${TARGET} ${PROJECT_PATH}/config/fontconfig/01-emoji.conf

    step '[7/9]' "🔗 Linking Qt5 settings...${IBlack}"
    TARGET="${HOME}/.config/qt5ct/" && mkdir -p ${TARGET}
    ln ${LN_OPTS} -t ${TARGET} ${PROJECT_PATH}/linux/qt5ct/qt5ct.conf

    step '[8/9]' "🔗 Touching .sudo_as_admin_successful in \$HOME...${IBlack}"
    touch ${HOME}/.sudo_as_admin_successful

    step '[9/9]' "🔗 Touching .hushlogin in \$HOME...${IBlack}"
    touch ${HOME}/.hushlogin

    success 'Symlinks created!'
  }

  # Install VIM - Vi IMproved with settings
  function vimrc() {
    title "Install VIM ${Purple}- Vi IMproved with settings${Color_Off}"
    step '[1/3]' '🔍 Check if VIM is installed...'
    VIM_FILE="${HOME}/.vimrc"
    VIM_FOLDER="${HOME}/.vim"

    [[ ! $(command -v vim) ]] &&
      step '[2/3]' '💻 Installing vim...'${IBlack} ||
      step '[2/3]' '💾 Updating...'${IBlack}

    sudo apt install $APT_PARAMS vim

    step '[3/3]' '💻 Installing vim plugins and settings...'
    [[ "$FORCE" == true ]] &&
      ANSWER='yes' ||
      ask 'This command will override ~/.vimrc file. Are you sure?' '[y/N]'

    [[ "$ANSWER" =~ ^([yY][eE][sS]|[yY])$ ]] && {
      printf ${IBlack}
      ln ${LN_OPTS} ${PROJECT_PATH}/config/vim/.vimrc ${HOME}/.vimrc
      ln ${LN_OPTS} ${PROJECT_PATH}/config/vim ${VIM_FOLDER}
      vim -E -s -u $HOME/.vimrc +PlugInstall +qall >/dev/null
      success 'VIM installed and configured'
    } || {
      abort 'User terminated the script.'
    }
  }

  # Call the install script without parameters.
  function all() {
    ohmyzsh
    spaceship
    zsh-syntax-highlighting
    zsh-autosuggestions
    shortcuts
    symlinks
    vimrc

    echo
    info Finished
  }

  # Call the header of the application.
  header

  # Detect execution modes.
  ARGS=($@)

  for arg in $ARGS; do
    if [[ $arg == "-v" ]] || [[ $arg == "--verbose" ]]; then
      VERBOSE=true && APT_PARAMS='-y' && LN_OPTS='-sfvn'
      info 'Verbose mode activated'
      delete=($arg)
      ARGS=("${ARGS[@]/$delete/}")
    fi

    if [[ $arg == "-f" ]] || [[ $arg == "--force" ]]; then
      FORCE=true
      info 'Run without confirmation activated'
      delete=($arg)
      ARGS=("${ARGS[@]/$delete/}")
    fi
  done

  # Trim args after detecting modes
  ARGS=$(echo $ARGS)

  # If empty ARGS, run all methods with defined modes...
  [[ "$ARGS" == '' ]] && all

  # ...or detect the function to run.
  for arg in $ARGS; do
    case $arg in
    ohmyzsh) ohmyzsh ;;
    spaceship) spaceship ;;
    zsh-syntax-highlighting) zsh-syntax-highlighting ;;
    zsh-autosuggestions) zsh-autosuggestions ;;
    shortcuts) shortcuts ;;
    -l | --link | symlinks) symlinks $@ ;;
    vim | vimrc) vimrc ;;
    bump) bump $@ ;;
    "" | all) all ;;
    *) exit ;;
    esac
  done
}

# Call the script
install $@
